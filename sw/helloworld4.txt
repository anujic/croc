#ifdef TEST_SIGN_OPERATIONS
void test_sign_operations(void) {
  printf("\nTesting sign manipulation instructions...\n");
  uart_write_flush();
  
  // Expected results
  float expected_fsgnj = -3.14159f; // f1 with sign of f3
  float expected_fsgnjn = 3.14159f; // f1 with negated sign of f3
  float expected_fsgnjx = -3.14159f; // f1 with XORed sign
  
  // FSGNJ.S - copy sign from f3 to f1
  asm volatile(
    "flw ft0, %1\n"
    "flw ft1, %2\n"
    "fsgnj.s ft2, ft0, ft1\n"
    "fsw ft2, %0\n"
    : "=m"(f_result)
    : "m"(f1), "m"(f3)  // f3 is negative
    : "ft0", "ft1", "ft2"
  );
  if(f_result == expected_fsgnj) {
    printf("  fsgnj.s: Passed! Sign copied correctly\n");
    uart_write_flush();
  } else {
    printf("  fsgnj.s: Failed! Expected negative result\n");
    uart_write_flush();
  }
  uart_write_flush();
  
  // FSGNJN.S - copy negated sign from f3 to f1
  asm volatile(
    "flw ft0, %1\n"
    "flw ft1, %2\n"
    "fsgnjn.s ft2, ft0, ft1\n"
    "fsw ft2, %0\n"
    : "=m"(f_result)
    : "m"(f1), "m"(f3)  // f3 is negative
    : "ft0", "ft1", "ft2"
  );
  if(f_result == expected_fsgnjn) {
    printf("  fsgnjn.s: Passed! Negated sign copied correctly\n");
    uart_write_flush();
  } else {
    printf("  fsgnjn.s: Failed! Expected positive result\n");
    uart_write_flush();
  }
  uart_write_flush();
  
  // FSGNJX.S - xor signs of f1 and f3
  asm volatile(
    "flw ft0, %1\n"
    "flw ft1, %2\n"
    "fsgnjx.s ft2, ft0, ft1\n"
    "fsw ft2, %0\n"
    : "=m"(f_result)
    : "m"(f1), "m"(f3)  // f3 is negative
    : "ft0", "ft1", "ft2"
  );
  if(f_result == expected_fsgnjx) {
    printf("  fsgnjx.s: Passed! Signs XORed correctly\n");
    uart_write_flush();
  } else {
    printf("  fsgnjx.s: Failed! Expected negative result\n");
    uart_write_flush();
  }
  uart_write_flush();
}
#endif

// In main function, add uart_write_flush() after the final printf
int main() {
  uart_init(); // setup the uart peripheral
  printf("=== RV32IF Instruction Test ===\n\n");
  uart_write_flush();
  #ifdef TEST_LOAD_STORE
  test_flw_fsw();
  #endif
  #ifdef TEST_ARITHMETIC
  test_arithmetic();
  #endif
  #ifdef TEST_COMPARISON
  test_compare();
  #endif
  #ifdef TEST_CONVERSION
  test_conversion();
  #endif
  #ifdef TEST_SIGN_OPERATIONS
  test_sign_operations();
  #endif
  #ifdef TEST_MOVE_INSTRUCTIONS
  test_move_instructions();
  #endif
  #ifdef TEST_FUSED_OPERATIONS
  test_fused_operations();
  #endif
  #ifdef TEST_CLASSIFY
  test_classify();
  #endif
  // Final message
  printf("\nAll tests completed\n");
  uart_write_flush();
  return 1;
}
